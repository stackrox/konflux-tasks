apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/stackrox/konflux-tasks?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "500"
    # The on-push filter includes konflux/* branches which are created by Mintmaker so that CI runs for commits pushed
    # onto these branches even without PRs and so that Mintmaker/Renovate can automerge its updates without PRs.
    pipelinesascode.tekton.dev/on-cel-expression: |
      (event == "push" && target_branch.matches("^(main|konflux/references/main|konflux/mintmaker/.*)$")) ||
      (event == "pull_request")
  creationTimestamp:
  labels:
    appstudio.openshift.io/application: acs-konflux-tasks
    appstudio.openshift.io/component: acs-konflux-tasks
    pipelines.appstudio.openshift.io/type: build
  name: acs-konflux-tasks-on-push
  namespace: rh-acs-tenant

spec:

  params:

  - name: git-url
    value: '{{source_url}}'
  - name: revision
    value: '{{revision}}'
  - name: output-image-repo
    value: quay.io/rhacs-eng/konflux-tasks
  - name: output-image-tag
    value: rev-{{revision}}
  - name: output-trust-data-repo
    value: quay.io/rhacs-eng/konflux-tasks-trust
  - name: rebuild
    value: "true"
  - name: build-source-image
    value: "true"
  - name: path-context
    value: tasks

  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'

  taskRunTemplate:
    serviceAccountName: build-pipeline-acs-konflux-tasks

  timeouts:
    tasks: 15m
    # Reserve time for final tasks to run.
    finally: 10m
    pipeline: 25m

  pipelineSpec:
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Repository of the output image
      name: output-image-repo
      type: string
    - description: Unique tag of the output image
      name: output-image-tag
      type: string
    - description: Image repository where to update data about tasks trust
      name: output-trust-data-repo
      type: string
    - default: .
      description: Path to the source code of an application's component from where to build image.
      name: path-context
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Build a source image.
      name: build-source-image
      type: string
    - default: "1d"
      description: This sets the expiration time for intermediate OCI artifacts produced and used during builds after which they can be garbage collected.
      name: oci-artifact-expires-after
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: Bundle reference you should use in the pipelines
      name: BUNDLE_REF
      value: $(tasks.get-bundle-info.results.BUNDLE_REF)
    - description: Bundle contents
      name: BUNDLE_CONTENTS
      value: $(tasks.get-bundle-info.results.BUNDLE_CONTENTS)

    workspaces:
    - name: git-auth

    finally:
    - name: slack-notification
      params:
      - name: message
        value: ':x: `{{event_type}}` pipeline for <https://console.redhat.com/application-pipeline/workspaces/rh-acs/applications/acs-konflux-tasks/pipelineruns/$(context.pipelineRun.name)|$(context.pipelineRun.name)> (`$(params.output-image-repo)`, revision <$(params.git-url)/commit/$(params.revision)|$(params.revision)>) has failed.'
      - name: key-name
        value: 'acs-konflux-notifications'
      when:
        # Run when any task has Failed
      - input: $(tasks.status)
        operator: in
        values: ["Failed"]
      taskRef:
        params:
        - name: name
          value: slack-webhook-notification
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-slack-webhook-notification:0.1@sha256:4e68fe2225debc256d403b828ed358345bb56d03327b46d55cb6c42911375750
        - name: kind
          value: task
        resolver: bundles

    tasks:

    - name: init
      params:
      - name: image-url
        value: $(params.output-image-repo):$(params.output-image-tag)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      taskRef:
        params:
        - name: name
          value: init
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:ded314206f09712b2116deb050b774ae7efef9ab243794334c8e616871a3ffa5
        - name: kind
          value: task
        resolver: bundles

    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      - name: ociStorage
        value: $(params.output-image-repo):$(params.output-image-tag).git
      - name: ociArtifactExpiresAfter
        value: $(params.oci-artifact-expires-after)
      taskRef:
        params:
        - name: name
          value: git-clone-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:4a601aeec58a1dd89c271e728fd8f0d84777825b46940c3aec27f15bab3edacf
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: ["true"]
      workspaces:
      - name: basic-auth
        workspace: git-auth

    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: ociStorage
        value: $(params.output-image-repo):$(params.output-image-tag).prefetch
      - name: ociArtifactExpiresAfter
        value: $(params.oci-artifact-expires-after)
      taskRef:
        params:
        - name: name
          value: prefetch-dependencies-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.2@sha256:0b58e5132333dd3b710ef9c18ecebe0d5e5b22066ba56481d34431c989cb21dd
        - name: kind
          value: task
        resolver: bundles
      workspaces:
      - name: git-basic-auth
        workspace: git-auth

    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image-repo):$(params.output-image-tag)
      - name: CONTEXT
        value: $(params.path-context)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: URL
        value: '{{source_url}}'
      - name: REVISION
        value: '{{revision}}'
      retries: 3 # To aid sporadic failures between tkn CLI and Quay.
      taskRef:
        params:
        - name: name
          value: tkn-bundle-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-tkn-bundle-oci-ta:0.2@sha256:9713f360e1cb7aa37fc98b633affcaf002ddfee5362b75123447d148cf0f8960
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: ["true"]

    - name: build-source-image
      params:
      - name: BINARY_IMAGE
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      - name: BINARY_IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      taskRef:
        params:
        - name: name
          value: source-build-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-source-build-oci-ta:0.3@sha256:a48c950350c5e9945cc4ad6bfad7fc653aa437c9eff74a25fd1d42fda4fe344d
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: ["true"]
      - input: $(params.build-source-image)
        operator: in
        values: ["true"]

    - name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: clair-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.2@sha256:076d5cde62b55bbfcdda2b4782392256bbda5ad38f839013b4330b3aba70a973
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: sast-snyk-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-snyk-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check-oci-ta:0.4@sha256:e371aa09c65ab309138b4aeae9ea4dd93f83119c5cc61e9f2057fe5bb518fbe9
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: clamav-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.3@sha256:b0bd59748cda4a7abf311e4f448e6c1d00c6b6d8c0ecc1c2eb33e08dc0e0b802
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: sast-coverity-check
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: IMAGE
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: CONTEXT
        value: $(params.path-context)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)
      - name: COMMIT_SHA
        value: $(tasks.clone-repository.results.commit)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-coverity-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-coverity-check-oci-ta:0.3@sha256:cdbe1a968676e4f5519b082bf1e27a4cdcf66dd60af66dbc26b3e604f957f7e9
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]
      - input: $(tasks.coverity-availability-check.results.STATUS)
        operator: in
        values: [success]

    - name: coverity-availability-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: coverity-availability-check
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-coverity-availability-check:0.2@sha256:db2b267dc15e4ed17f704ee91b8e9b38068e1a35b1018a328fdca621819d74c6
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: sast-shell-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-shell-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check-oci-ta:0.1@sha256:bf7bdde00b7212f730c1356672290af6f38d070da2c8a316987b5c32fd49e0b9
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: sast-unicode-check
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-shell-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check-oci-ta:0.1@sha256:bf7bdde00b7212f730c1356672290af6f38d070da2c8a316987b5c32fd49e0b9
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: get-floating-tag
      description: Determines a floating tag that should be applied to the resulting images. The tasks image should be referenced by this floating tag and digest in the Tekton pipelines which use it.
      taskSpec:
        results:
        - name: FLOATING_TAG
          description: Floating tag to apply to the resulting images.
        steps:
        - name: get-floating-tag
          image: registry.redhat.io/ubi9-minimal:latest@sha256:7c5495d5fad59aaee12abc3cbbd2b283818ee1e814b00dbc7f25bf2d14fa4f0c
          env:
          - name: SOURCE_BRANCH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelinesascode.tekton.dev/source-branch']
          - name: TARGET_BRANCH
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelinesascode.tekton.dev/branch']
          - name: PULL_REQUEST_NUMBER
            value: '{{pull_request_number}}'
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            # Normalize branch names because Konflux sometimes prepends refs/heads/ and sometimes doesn't.
            SOURCE_BRANCH="${SOURCE_BRANCH#refs/heads/}"
            TARGET_BRANCH="${TARGET_BRANCH#refs/heads/}"

            echo "Source branch: ${SOURCE_BRANCH}"
            echo "Target branch: ${TARGET_BRANCH}"
            echo "Pull request number: ${PULL_REQUEST_NUMBER}"

            if [[ "${SOURCE_BRANCH}" != "${TARGET_BRANCH}" ]]; then
              floating_tag="pr-${PULL_REQUEST_NUMBER}"
            else
              floating_tag="$(echo "${SOURCE_BRANCH}" | sed 's/[^a-zA-Z0-9_.]/-/g')"
              if [[ "${SOURCE_BRANCH}" == "main" ]]; then
                floating_tag="latest"
              fi
            fi
            echo -n "${floating_tag}" | tee "$(results.FLOATING_TAG.path)"

    - name: generate-unique-tag
      description: Generates a unique tag to apply to the resulting images. Both $(params.output-image-tag) and $(tasks.get-floating-tag.results.FLOATING_TAG) are practically floating tags and will be moved when the pipeline gets re-triggered for the same commit or runs for subsequent commits (respectively). Once they both get moved and there's no more tag pointing at this image, Quay will garbage collect it. This creates a problem for images built in the main branch if they happen to get used in any of the repos - builds in these repos will fail once the image is gone. Therefore, this task generates a unique image tag for each build which won't get moved and so Quay will keep the image. There's ROX-27836 to prevent garbage piling up.
      taskSpec:
        results:
        - name: UNIQUE_TAG
          description: Unique tag to apply to the resulting images.
        steps:
        - name: generate-unique-tag
          image: registry.redhat.io/ubi9-minimal:latest@sha256:7c5495d5fad59aaee12abc3cbbd2b283818ee1e814b00dbc7f25bf2d14fa4f0c
          script: |
            #!/usr/bin/env bash
            set -euo pipefail
            echo -n "keep-image-$(params.output-image-tag)-$( date +%Y-%m-%d-%H-%M-%S.%N )" | tee "$(results.UNIQUE_TAG.path)"

    - name: apply-tags
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: ADDITIONAL_TAGS
        value: [$(tasks.get-floating-tag.results.FLOATING_TAG), $(tasks.generate-unique-tag.results.UNIQUE_TAG)]
      taskRef:
        params:
        - name: name
          value: apply-tags
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-apply-tags:0.2@sha256:e0de426d492e195f59c99d2ea1ca0df7bfb8c689f5d1468fe7f70eb8684b8d02
        - name: kind
          value: task
        resolver: bundles

    - name: rpms-signature-scan
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      taskRef:
        params:
        - name: name
          value: rpms-signature-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-rpms-signature-scan:0.2@sha256:1b6c20ab3dbfb0972803d3ebcb2fa72642e59400c77bd66dfd82028bdd09e120
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: ["false"]

    - name: get-bundle-info
      description: Prints info about the built tasks bundle.
      params:
      - name: BUNDLE_REF
        value: $(params.output-image-repo):$(tasks.get-floating-tag.results.FLOATING_TAG)@$(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
        # Explicit dependency on `apply-tags` because the FLOATING_TAG is actually applied there.
      - apply-tags
      taskSpec:
        params:
        - name: BUNDLE_REF
          type: string
        results:
        - name: BUNDLE_REF
        - name: BUNDLE_CONTENTS
        steps:
        - name: get-bundle-info
          image: quay.io/konflux-ci/appstudio-utils:latest@sha256:93b2ac6d152c21183c2eaeccdd1a56c4f0f88146c82cd0b0b1e01ee97748fd0c
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            echo "Bundle reference:"
            # We pass through the input bundle reference to the task's output to later return it as one of the pipeline
            # results. That's because Tekton errors out if we try to pass input parameters ($(params.output-image-repo)
            # in this case) to the pipeline output results. ¯\_(ツ)_/¯
            echo -n "$(params.BUNDLE_REF)" | tee "$(results.BUNDLE_REF.path)"

            echo
            echo
            echo "Bundle contents:"
            tkn bundle list "$(params.BUNDLE_REF)" | tee "$(results.BUNDLE_CONTENTS.path)"

    - name: update-tasks-trust
      description: Updates the image which allows to trust built tasks in EC.
      params:
      - name: BUNDLE_REF
        value: $(tasks.get-bundle-info.results.BUNDLE_REF)
      - name: TRUST_IMAGE_REPO
        value: $(params.output-trust-data-repo)
      - name: TRUST_IMAGE_TAG
        value: $(tasks.get-floating-tag.results.FLOATING_TAG)
      taskSpec:
        params:
        - name: BUNDLE_REF
          type: string
        - name: TRUST_IMAGE_REPO
          type: string
        - name: TRUST_IMAGE_TAG
          type: string
        results:
        - name: TRUST_BUNDLE_IMAGE_DIGEST
          description: Image digest of the trust bundle artifact
        steps:
        - name: update-tasks-trust
          image: quay.io/konflux-ci/appstudio-utils:latest@sha256:93b2ac6d152c21183c2eaeccdd1a56c4f0f88146c82cd0b0b1e01ee97748fd0c
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            trust_image_tag="$(params.TRUST_IMAGE_TAG)"

            trust_image_repo="$(params.TRUST_IMAGE_REPO)"
            trust_image_repo_no_quay_io="${trust_image_repo#quay.io}"

            trust_image_ref="${trust_image_repo}:${trust_image_tag}"

            trust_image_remote_tag_name="$( curl --silent --show-error --fail --location \
                --retry 5 --retry-all-errors --max-time 60 \
                --get --data-urlencode "specificTag=${trust_image_tag}" \
                "https://quay.io/api/v1/repository/${trust_image_repo_no_quay_io}/tag/" | \
              jq -r ".tags[0].name" )"

            # The `ec track bundle` command isn't designed in a friendly way for us, unfortunately.
            #
            # Its `--input` argument (combined with `--replace`) is what we need most of times. Despite its name, it not
            # only loads existing trust info from the provided location, it also pushes the updated info to that same
            # location. When we use `--input`, the trust data accumulates (which is what we need).
            # However, the command with `--input` fails when the tag we want to push to doesn't exist. If it did not
            # fail but push an image in this case, that would be the only necessary command.
            # The error looks like this:
            #  Error: GET https://quay.io/v2/rhacs-eng/konflux-tasks-trust/manifests/pr-7: MANIFEST_UNKNOWN: manifest unknown; map[]
            #
            # There is the `--output` argument which unlike `--input` does not fail when the image does not exist but
            # creates it. The issue with `--output` is that it overwrites any existing trust data with just one bundle.
            # Therefore, `--output` should only be used when the trust image does not yet exist.
            #
            # The logic here is to check whether the trust image already exists under the specified floating tag and
            # use `--input` when it does, otherwise use `--output`. Unfortunately, this is check-then-act and prone to
            # races but hopefully races between the first pipeline runs aren't common and issues shouldn't appear after
            # that.
            #
            if [[ "${trust_image_remote_tag_name}" != "null" ]]; then
              echo ">>> ${trust_image_ref} exists and will be updated"
              ec --debug track bundle --freshen \
                --bundle "$(params.BUNDLE_REF)" \
                --input "oci:${trust_image_ref}" --replace
            else
              echo ">>> ${trust_image_ref} does not exist and will be pushed"
              ec --debug track bundle --freshen \
                --bundle "$(params.BUNDLE_REF)" \
                --output "oci:${trust_image_ref}"
            fi

            # Because this image is a custom type we can't use skopeo inspect, oras manifest or podman manifest inspect easily,
            # as they don't include the manifest of the artifact, only of the content layers.
            # Hence, we take this workaround to build the sha256 sum ourselves.
            DIGEST=$(skopeo inspect --raw docker://${trust_image_ref} \
              | sha256sum | cut -d' ' -f1)
            echo -n "sha256:${DIGEST}" | tee "$(results.TRUST_BUNDLE_IMAGE_DIGEST.path)"
            echo

            echo ">>> Done"

    - name: apply-tags-trust
      params:
      - name: IMAGE_URL
        value: $(params.output-trust-data-repo):$(tasks.get-floating-tag.results.FLOATING_TAG)
      - name: IMAGE_DIGEST
        value: $(tasks.update-tasks-trust.results.TRUST_BUNDLE_IMAGE_DIGEST)
      - name: ADDITIONAL_TAGS
        value: [$(tasks.generate-unique-tag.results.UNIQUE_TAG)]
      taskRef:
        params:
        - name: name
          value: apply-tags
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-apply-tags:0.2@sha256:e0de426d492e195f59c99d2ea1ca0df7bfb8c689f5d1468fe7f70eb8684b8d02
        - name: kind
          value: task
        resolver: bundles
