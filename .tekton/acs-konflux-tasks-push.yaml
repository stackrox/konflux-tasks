apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/stackrox/konflux-tasks?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "500"
    # The on-push filter includes konflux/* branches which are created by Mintmaker so that CI runs for commits pushed
    # onto these branches even without PRs and so that Mintmaker/Renovate can automerge its updates without PRs.
    pipelinesascode.tekton.dev/on-cel-expression: |
      (event == "push" && target_branch.matches("^(main|konflux/references/main|konflux/mintmaker/.*)$")) ||
      (event == "pull_request")
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: acs-konflux-tasks
    appstudio.openshift.io/component: acs-konflux-tasks
    pipelines.appstudio.openshift.io/type: build
  name: acs-konflux-tasks-on-push
  namespace: rh-acs-tenant

spec:

  params:

  - name: git-url
    value: '{{source_url}}'
  - name: revision
    value: '{{revision}}'
  - name: output-image-repo
    value: quay.io/rhacs-eng/konflux-tasks
  - name: output-image-tag
    value: rev-{{revision}}
  - name: output-trust-data-repo
    value: quay.io/rhacs-eng/konflux-tasks-trust
  - name: rebuild
    value: "true"
  - name: build-source-image
    value: "true"
  - name: path-context
    value: tasks

  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'

  timeouts:
    tasks: 15m
    # Reserve time for final tasks to run.
    finally: 10m
    pipeline: 25m

  pipelineSpec:

    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Repository of the output image
      name: output-image-repo
      type: string
    - description: Unique tag of the output image
      name: output-image-tag
      type: string
    - description: Image repository where to update data about tasks trust
      name: output-trust-data-repo
      type: string
    - default: .
      description: Path to the source code of an application's component from where
        to build image.
      name: path-context
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Build a source image.
      name: build-source-image
      type: string
    - default: "1d"
      description: This sets the expiration time for intermediate OCI artifacts produced and used during builds after which they can be garbage collected.
      name: oci-artifact-expires-after
      type: string

    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: Bundle reference you should use in the pipelines
      name: BUNDLE_REF
      value: $(tasks.get-bundle-info.results.BUNDLE_REF)
    - description: Bundle contents
      name: BUNDLE_CONTENTS
      value: $(tasks.get-bundle-info.results.BUNDLE_CONTENTS)

    workspaces:
    - name: git-auth

    finally:

    - name: slack-notification
      params:
      - name: message
        value: ':x: `{{event_type}}` pipeline for <https://console.redhat.com/application-pipeline/workspaces/rh-acs/applications/acs-konflux-tasks/pipelineruns/$(context.pipelineRun.name)|$(context.pipelineRun.name)> (`$(params.output-image-repo)`, revision <$(params.git-url)/commit/$(params.revision)|$(params.revision)>) has failed.'
      - name: key-name
        value: 'acs-konflux-notifications'
      when:
      # Run when any task has Failed
      - input: $(tasks.status)
        operator: in
        values: [ "Failed" ]
      taskRef:
        params:
        - name: name
          value: slack-webhook-notification
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-slack-webhook-notification:0.1@sha256:dc17b70633363d78414b8c06dc1660d25742935f106a6116995638e1210c2730
        - name: kind
          value: task
        resolver: bundles

    - name: show-sbom
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: show-sbom
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1@sha256:945a7c9066d3e0a95d3fddb7e8a6992e4d632a2a75d8f3a9bd2ff2fef0ec9aa0
        - name: kind
          value: task
        resolver: bundles

    tasks:

    - name: init
      params:
      - name: image-url
        value: $(params.output-image-repo):$(params.output-image-tag)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      taskRef:
        params:
        - name: name
          value: init
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:90dda596d44b3f861889da2fba161dff34c6116fe76c3989e3f84262ea0f29cd
        - name: kind
          value: task
        resolver: bundles

    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      - name: ociStorage
        value: $(params.output-image-repo):$(params.output-image-tag).git
      - name: ociArtifactExpiresAfter
        value: $(params.oci-artifact-expires-after)
      taskRef:
        params:
        - name: name
          value: git-clone-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:f72fcca6732516339d55ac5f01660e287968e64e857a40a8608db27e298b5126
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: [ "true" ]
      workspaces:
      - name: basic-auth
        workspace: git-auth

    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: ociStorage
        value: $(params.output-image-repo):$(params.output-image-tag).prefetch
      - name: ociArtifactExpiresAfter
        value: $(params.oci-artifact-expires-after)
      taskRef:
        params:
        - name: name
          value: prefetch-dependencies-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.1@sha256:994f816e36ac832f4020647afd69223a015c84c503f925013c573fed52f05420
        - name: kind
          value: task
        resolver: bundles
      workspaces:
      - name: git-basic-auth
        workspace: git-auth

    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image-repo):$(params.output-image-tag)
      - name: CONTEXT
        value: $(params.path-context)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      retries: 3 # To aid sporadic failures between tkn CLI and Quay.
      taskRef:
        params:
        - name: name
          value: tkn-bundle-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-tkn-bundle-oci-ta:0.1@sha256:b4b457d18a01348bd3d7d19b0ce05754c739efb2eb44be602c3050ed99c31a21
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: [ "true" ]

    - name: build-source-image
      params:
      - name: BINARY_IMAGE
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: source-build-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-source-build-oci-ta:0.1@sha256:75e882bf1619dd45a4043060ce42a6ad3ce781264ade5b7f66a1d994ee159126
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values: [ "true" ]
      - input: $(params.build-source-image)
        operator: in
        values: [ "true" ]

    - name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: clair-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.2@sha256:907f11c67b0330480cbf85c23b1085acc5a049ab90af980169251860a3d97ef7
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: sast-snyk-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-snyk-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check-oci-ta:0.3@sha256:af93b35e6e71a6ff7f3785ad8d8497b11204a5c0c33ab1a78b44f9d43f49c7a5
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: clamav-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.2@sha256:c12e7a774bb07ad2796c01071b0dc0f199111b0ee99c45b55fa599e23b200bae
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: sast-coverity-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-coverity-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-coverity-check-oci-ta:0.1@sha256:fde1e556e69b8293a38d815473040f0d1ee3567c520c52cb1bd4ea712c715b4f
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]
      - input: $(tasks.coverity-availability-check.results.STATUS)
        operator: in
        values: [ success ]

    - name: coverity-availability-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: coverity-availability-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-coverity-availability-check-oci-ta:0.1@sha256:18c1c2665cdb10ca589f69f75f2bb49758f9ed75b69a9171d562856dec3cfd76
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: sast-shell-check
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-shell-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check-oci-ta:0.1@sha256:7553ec6925d0586b286502669b8e31a39dc73501f657426bac99019ac598d6ab
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: sast-unicode-check
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      taskRef:
        params:
        - name: name
          value: sast-shell-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check-oci-ta:0.1@sha256:7553ec6925d0586b286502669b8e31a39dc73501f657426bac99019ac598d6ab
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: get-floating-tag
      description: Determines a floating tag that should be applied to the resulting images.
      taskSpec:
        results:
        - name: FLOATING_TAG
          description: Floating tag to apply to the resulting images.
        steps:
        - name: get-floating-tag
          image: registry.redhat.io/ubi9-micro:latest@sha256:becdf7fff4509ee81df982000d0adef858a7ae7995dfb7d774b9ded6a461ebad
          env:
          - name: EVENT_TYPE
            value: '{{event_type}}'
          - name: SOURCE_BRANCH
            value: '{{source_branch}}'
          - name: PULL_REQUEST_NUMBER
            value: '{{pull_request_number}}'
          script: |
            #!/usr/bin/env bash
            set -euo pipefail
            
            if [[ "${EVENT_TYPE}" == "pull_request" ]]; then
              floating_tag="pr-${PULL_REQUEST_NUMBER}"
            else
              floating_tag="${SOURCE_BRANCH}"
              if [[ "${floating_tag}" == "main" ]]; then
                floating_tag="latest"
              fi
            fi
            
            echo -n "${floating_tag}" | tee "$(results.FLOATING_TAG.path)"

    - name: apply-tags
      params:
      - name: IMAGE
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: ADDITIONAL_TAGS
        value: [ $(tasks.get-floating-tag.results.FLOATING_TAG) ]
      taskRef:
        params:
        - name: name
          value: apply-tags
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-apply-tags:0.1@sha256:2c2d88c07623b2d25163994ded6e9f29205ea5bbab090f4c86379739940028b9
        - name: kind
          value: task
        resolver: bundles

    - name: rpms-signature-scan
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      taskRef:
        params:
        - name: name
          value: rpms-signature-scan
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-rpms-signature-scan:0.2@sha256:39cd56ffa26ff5edfd5bf9b61e902cae35a345c078cd9dcbc0737d30f3ce5ef1
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values: [ "false" ]

    - name: get-bundle-info
      description: Prints info about the built tasks bundle.
      params:
      - name: BUNDLE_REF
        value: $(params.output-image-repo):$(tasks.get-floating-tag.results.FLOATING_TAG)@$(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      # Explicit dependency on `apply-tags` because the FLOATING_TAG is actually applied there.
      - apply-tags
      taskSpec:
        params:
        - name: BUNDLE_REF
          type: string
        results:
        - name: BUNDLE_REF
        - name: BUNDLE_CONTENTS
        steps:
        - name: get-bundle-info
          image: quay.io/konflux-ci/appstudio-utils:latest@sha256:456ebb299084a79952f0317e48cea63c5f6a9619de3d3f4aac942bb58b4812d9
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            echo "Bundle reference:"
            # We pass through the input bundle reference to the task's output to later return it as one of the pipeline
            # results. That's because Tekton errors out if we try to pass input parameters ($(params.output-image-repo)
            # in this case) to the pipeline output results. ¯\_(ツ)_/¯
            echo -n "$(params.BUNDLE_REF)" | tee "$(results.BUNDLE_REF.path)"

            echo
            echo
            echo "Bundle contents:"
            tkn bundle list "$(params.BUNDLE_REF)" | tee "$(results.BUNDLE_CONTENTS.path)"

    - name: update-tasks-trust
      description: Updates the image which allows to trust built tasks in EC.
      params:
      - name: BUNDLE_REF
        value: $(tasks.get-bundle-info.results.BUNDLE_REF)
      - name: TRUST_IMAGE_REPO
        value: $(params.output-trust-data-repo)
      - name: TRUST_IMAGE_TAG
        value: $(tasks.get-floating-tag.results.FLOATING_TAG)
      taskSpec:
        params:
        - name: BUNDLE_REF
          type: string
        - name: TRUST_IMAGE_REPO
          type: string
        - name: TRUST_IMAGE_TAG
          type: string
        steps:
        - name: update-tasks-trust
          image: quay.io/konflux-ci/appstudio-utils:latest@sha256:456ebb299084a79952f0317e48cea63c5f6a9619de3d3f4aac942bb58b4812d9
          script: |
            #!/usr/bin/env bash
            set -euo pipefail

            trust_image_tag="$(params.TRUST_IMAGE_TAG)"

            trust_image_repo="$(params.TRUST_IMAGE_REPO)"
            trust_image_repo_no_quay_io="${trust_image_repo#quay.io}"

            trust_image_ref="${trust_image_repo}:${trust_image_tag}"

            trust_image_remote_tag_name="$( curl --silent --show-error --fail --location \
                --retry 5 --retry-all-errors --max-time 60 \
                --get --data-urlencode "specificTag=${trust_image_tag}" \
                "https://quay.io/api/v1/repository/${trust_image_repo_no_quay_io}/tag/" | \
              jq -r ".tags[0].name" )"

            # The `ec track bundle` command isn't designed in a friendly way for us, unfortunately.
            #
            # Its `--input` argument (combined with `--replace`) is what we need most of times. Despite its name, it not
            # only loads existing trust info from the provided location, it also pushes the updated info to that same
            # location. When we use `--input`, the trust data accumulates (which is what we need).
            # However, the command with `--input` fails when the tag we want to push to doesn't exist. If it did not
            # fail but push an image in this case, that would be the only necessary command.
            # The error looks like this:
            #  Error: GET https://quay.io/v2/rhacs-eng/konflux-tasks-trust/manifests/pr-7: MANIFEST_UNKNOWN: manifest unknown; map[]
            #
            # There is the `--output` argument which unlike `--input` does not fail when the image does not exist but
            # creates it. The issue with `--output` is that it overwrites any existing trust data with just one bundle.
            # Therefore, `--output` should only be used when the trust image does not yet exist.
            #
            # The logic here is to check whether the trust image already exists under the specified floating tag and
            # use `--input` when it does, otherwise use `--output`. Unfortunately, this is check-then-act and prone to
            # races but hopefully races between the first pipeline runs aren't common and issues shouldn't appear after
            # that.
            #
            if [[ "${trust_image_remote_tag_name}" != "null" ]]; then
              echo ">>> ${trust_image_ref} exists and will be updated"
              ec --debug track bundle --freshen \
                --bundle "$(params.BUNDLE_REF)" \
                --input "oci:${trust_image_ref}" --replace
            else
              echo ">>> ${trust_image_ref} does not exist and will be pushed"
              ec --debug track bundle --freshen \
                --bundle "$(params.BUNDLE_REF)" \
                --output "oci:${trust_image_ref}"
            fi

            echo ">>> Done"
