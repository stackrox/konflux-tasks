apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for-image
spec:
  description: Waits until the specified image is found and returns its digest.
  params:
  - name: IMAGE
    description: Image reference.
    type: string
  results:
  - name: IMAGE_DIGEST
    description: Image digest in the format `sha256:abcdef0123`.
  - name: GIT_REF
    description: Git commit for the image's source code from `vcs-ref` image label.
  - name: GIT_REPO
    description: Git repository URL for the image's source code from `source-location` image label.
  steps:
  - name: wait-for-image
    image: quay.io/konflux-ci/release-service-utils:latest@sha256:3955ebf71ad70d59e1d51b8030089157fff494b017269ce940e67d11454bd470
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      echo "Waiting for image $(params.IMAGE) to become available..."
      while true; do
        if skopeo inspect --raw "docker://$(params.IMAGE)"; then
          break
        fi
        sleep 1m
      done

      echo "Image $(params.IMAGE) found."

      raw_info="$(skopeo inspect \
        --retry-times 10 \
        --format '{{.Digest}} {{ index .Labels "vcs-ref" }} {{ index .Labels "source-location" }}' \
        --no-tags \
        "docker://$(params.IMAGE)")"

      # Turning raw_info into an array for easier handling.
      infos=( $raw_info )
      if [[ "${#infos[@]}" -ne 3 ]]; then
        >&2 echo "ERROR: Not all required information was found. Verify that the 'vcs-ref' and 'source-location' labels are set on the image $(params.IMAGE)."
        exit 1
      fi

      # Output
      echo -n "${infos[0]}" | tee "$(results.IMAGE_DIGEST.path)"
      echo
      echo -n "${infos[1]}" | tee "$(results.GIT_REF.path)"
      echo
      echo -n "${infos[2]}" | tee "$(results.GIT_REPO.path)"
      echo

      IMAGE_WITH_DIGEST="$(params.IMAGE)@${infos[0]}"
      echo "Waiting for attestation for ${IMAGE_WITH_DIGEST} to appear..."
      while true; do
        if cosign tree "${IMAGE_WITH_DIGEST}" | grep -qE "quay.io/.*:sha256-.*\.att$"; then
          break
        fi
        echo "Attestation for ${IMAGE_WITH_DIGEST} not (yet) found, sleeping and retrying..."
        sleep 1m
      done

      echo "Attestion for ${IMAGE_WITH_DIGEST} found, which means PipelineRun finished. Checking if any tasks finished unsuccessfully."

      no_success="$(cosign download attestation "${IMAGE_WITH_DIGEST}" | \
        jq -r '.payload' | \
        base64 -d | \
        jq '.predicate.buildConfig.tasks | [ .[] | select(.status != "Succeeded") ] | length'
      )"

      if [[ "${no_success}" -gt 0 ]]; then
        >&2 echo "ERROR: At least one task has failed during build of ${IMAGE_WITH_DIGEST}."
        >&2 echo "ERROR: This image will likely fail Conforma checks. Try building it again and re-run this pipeline."
        exit 1
      else
        echo "The pipeline that built ${IMAGE_WITH_DIGEST} finished successfully."
        echo "Accepting this image."
      fi
