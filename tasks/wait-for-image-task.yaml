apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for-image
spec:
  description: Waits until the specified image is found and returns its digest.
  params:
  - name: IMAGE
    description: Image reference.
    type: string
  results:
  - name: IMAGE_DIGEST
    description: Image digest in the format `sha256:abcdef0123`.
  - name: GIT_REF
    description: Git commit for the image's source code from `vcs-ref` image label.
  - name: GIT_REPO
    description: Git repository URL for the image's source code from `source-location` image label.
  steps:
  - name: wait-for-image
    image: registry.access.redhat.com/ubi9/skopeo@sha256:df66d59b6ef68f352af64c6fe2ba430cf531c866280ef22842da1eb6dac3aa11
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      echo "Waiting for image $(params.IMAGE) to become available..."
      while true; do
        if skopeo inspect --raw "docker://$(params.IMAGE)"; then
          break
        fi
        sleep 1m
      done

      echo "Image $(params.IMAGE) found."

      raw_info="$(skopeo inspect \
        --retry-times 10 \
        --format '{{.Digest}} {{ index .Labels "vcs-ref" }} {{ index .Labels "source-location" }}' \
        --no-tags \
        "docker://$(params.IMAGE)")"

      # Turning raw_info into an array for easier handling.
      infos=( $raw_info )
      if [[ "${#infos[@]}" -ne 3 ]]; then
        echo "ERROR: Not all required information was found. Verify that the 'vcs-ref' and 'source-location' labels are set on the image $(params.IMAGE)."
        exit 1
      fi

      # Output
      echo -n "${infos[0]}" | tee "$(results.IMAGE_DIGEST.path)"
      echo -n "${infos[1]}" | tee "$(results.GIT_REF.path)"
      echo -n "${infos[2]}" | tee "$(results.GIT_REPO.path)"

  - name: wait-for-attestation
    image: registry.redhat.io/rhtas/cosign-rhel9:1.2.0-1744791100@sha256:cb53dcc3bc912dd7f12147f33af1b435eae5ff4ab83b85c0277b4004b20a0248
    script: |
      #!/usr/bin/env bash

      set -exuo pipefail

      # Wait for the attestation OCI to appear.
      echo "Waiting for attestation OCI $(params.IMAGE).att to appear..."
      while true; do
        if cosign tree "$(params.IMAGE)" | grep -E "quay.io/rhacs-eng/release-.*:sha256-.*\.att$"; then
          break
        fi
        sleep 1m
      done

      echo "Attestion $(params.IMAGE) found, signalling a successfully finished PipelineRun"
