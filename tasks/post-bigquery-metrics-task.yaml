apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: post-bigquery-metrics
spec:
  description: Adds a record to ACS BigQuery table about the pipeline's execution status.
  params:
  - name: AGGREGATE_TASKS_STATUS
    default: ''
    description: TODO
  results:
  volumes:
  - name: gcp-service-account
    secret:
      optional: false
      secretName: konflux-metrics-gcp-service-account
  steps:
  - name: update-bigquery
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:stable@sha256:767516bf8e50f22c074c07e1138844744b80345e5ca315ea413a88ab22e36089
    volumeMounts:
    - name: gcp-service-account
      mountPath: /mnt/gcp-service-account
    env:
    - name: PIPELINE_RUN_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['tekton.dev/pipelineRun']
    - name: ORIGINAL_PIPELINE_RUN_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pipelinesascode.tekton.dev/original-prname']
    - name: REPO_URL
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['pipelinesascode.tekton.dev/repo-url']
    - name: SOURCE_BRANCH
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['pipelinesascode.tekton.dev/source-branch']
    - name: PULL_REQUEST_NUMBER
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pipelinesascode.tekton.dev/pull-request']
    - name: COMMIT_SHA
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pipelinesascode.tekton.dev/sha']
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      GCP_PROJECT="acs-san-stackroxci"
      TABLE_NAME="${GCP_PROJECT}.ci_metrics.stackrox_jobs"

      gcloud auth activate-service-account --key-file /mnt/gcp-service-account/konflux-metrics-gcp-service-account
      gcloud config set project "${GCP_PROJECT}"

      AGGREGATE_TASKS_STATUS="$(params.AGGREGATE_TASKS_STATUS)"

      if [[ -n "${AGGREGATE_TASKS_STATUS}" ]]; then

        echo "This is the second and the final task call, updating a record"
        bq query \
          --use_legacy_sql=false \
          --parameter="id::${PIPELINE_RUN_NAME}" \
          --parameter="outcome::${AGGREGATE_TASKS_STATUS}" \
          "UPDATE ${TABLE_NAME}
          SET
            stopped_at=CURRENT_TIMESTAMP(),
            outcome=@outcome
          WHERE id=@id"

      else

        echo "This is the first task call, inserting a record"
        bq query \
          --use_legacy_sql=false \
          --parameter="id::${PIPELINE_RUN_NAME}" \
          --parameter="name::${ORIGINAL_PIPELINE_RUN_NAME}" \
          --parameter="repo::${REPO_URL}" \
          --parameter="branch::${SOURCE_BRANCH}" \
          --parameter="pr_number:INTEGER:${PULL_REQUEST_NUMBER:-NULL}" \
          --parameter="commit_sha::${COMMIT_SHA}" \
          "INSERT INTO ${TABLE_NAME}
          (id, name, repo, branch, pr_number, commit_sha, started_at, ci_system)
          VALUES
          (@id, @name, @repo, @branch, @pr_number, @commit_sha, CURRENT_TIMESTAMP(), 'konflux')"

      fi
