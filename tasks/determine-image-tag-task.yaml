apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-image-tag
spec:
  description: Determines the tag for the output image using the StackRox convention from 'make tag' output.
  params:
  - name: TAG_SUFFIX
    description: Suffix to append to generated image tag.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with the application source code. This should be the
      result of the git-clone task, results from other tasks might fail as dirty.
    type: string
  - name: MAKEFILE_DIRECTORY
    description: Directory in which to run 'make' command.
    type: string
    default: "."
  - name: SOURCE_BRANCH
    description: Branch (or tag) that triggered a build pipeline with this task.
      Must be set to {{ source_branch }} Pipelines as Code variable.
      See https://pipelinesascode.com/docs/guide/authoringprs/#dynamic-variables
    type: string
  results:
  - name: IMAGE_TAG
    description: Image Tag determined by the custom logic.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: determine-image-tag
    image: registry.access.redhat.com/ubi9:latest@sha256:53d6c19d664f4f418ce5c823d3a33dbb562a2550ea249cf07ef10aa063ace38f
    workingDir: /var/workdir/source
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      dnf -y install git make

      function fail_build_if_git_is_dirty() {
        echo "Checking that there are no uncommitted changes in the git repo."
        echo "If this command fails, you should see the list of modified files below."
        echo "You need to find the reason and prevent it because otherwise the 'make tag' output will include '-dirty' which likely isn't what you want."
        echo ""

        if git status --porcelain | grep '.' >&2 ; then
          >&2 echo "ERROR: Modified files found."
          exit 2
        else
          echo "git repo looks clean."
        fi
      }

      fail_build_if_git_is_dirty

      source_branch="$(params.SOURCE_BRANCH)"
      suffix="$(params.TAG_SUFFIX)"

      if [[ "${source_branch}" == refs/tags/* ]]; then
        echo "${source_branch} seems to be a build of a git tag, will use this git tag."
        image_tag="${source_branch#refs/tags/}"
      else
        # Otherwise, delegate the work to Makefiles.
        image_tag="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory tag)"
      fi

      echo -n "${image_tag}${suffix}" | tee "$(results.IMAGE_TAG.path)"
