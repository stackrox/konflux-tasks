apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-image-tag
spec:
  description: Determines the tag for the output image using the StackRox convention from 'make tag' output.
  params:
  - name: TAG_SUFFIX
    description: Suffix to append to generated image tag.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with the application source code. This should be the
      result of the git-clone task, results from other tasks might fail as dirty.
    type: string
  - name: MAKEFILE_DIRECTORY
    description: Directory in which to run 'make' command.
    type: string
    default: "."
  - name: SOURCE_BRANCH
    description: Branch (or tag) that triggered a build pipeline with this task.
      Must be set to '{{ source_branch }}' Pipelines as Code variable.
      See https://pipelinesascode.com/docs/guide/authoringprs/#dynamic-variables
    type: string
  results:
  - name: IMAGE_TAG
    description: Image Tag determined by the custom logic.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:ff35e09ff5c89e54538b50abae241a765b2b7868f05d62c4835bebf0978f3659
    computeResources:
      requests:
        memory: 2Gi
      limits:
        memory: 2Gi
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: determine-image-tag
    image: registry.access.redhat.com/ubi9:latest@sha256:53d6c19d664f4f418ce5c823d3a33dbb562a2550ea249cf07ef10aa063ace38f
    workingDir: /var/workdir/source
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      function main() {
        dnf -y install git make

        fail_build_if_git_is_dirty

        local -r suffix="$(params.TAG_SUFFIX)"
        local -r source_branch="$(params.SOURCE_BRANCH)"

        local image_tag
        image_tag="$(determine_tag)"

        echo -n "${image_tag}${suffix}" | tee "$(results.IMAGE_TAG.path)"
      }

      function fail_build_if_git_is_dirty() {
        echo "Checking that there are no uncommitted changes in the git repo."
        echo "If this command fails, you should see the list of modified files below."
        echo "You need to find the reason and prevent it because otherwise the 'make tag' output will include '-dirty' which likely isn't what you want."
        echo ""

        if git status --porcelain | grep "." >&2 ; then
          >&2 echo "ERROR: Modified files found."
          exit 2
        else
          echo "git repo looks clean."
        fi
      }

      function determine_tag() {
        function log() {
          # Log to stderr so not to mess up the function's printed result.
          >&2 echo "$@"
        }

        # 1. Gather data

        local tag_from_tekton=""
        if [[ "${source_branch}" == refs/tags/* ]]; then
          tag_from_tekton="${source_branch#refs/tags/}"
        fi
        log "Tag from Tekton event: '${tag_from_tekton}'"

        local tag_from_makefile
        tag_from_makefile="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory tag)"
        log "Tag reported by Makefile: '${tag_from_makefile}'"

        # Fast Stream tags/versions must be comparable according to SemVer and so versions like '4.7.x-anything' should
        # be converted to '4.7.0-anything'.
        local tag_from_makefile_sanitized
        tag_from_makefile_sanitized="$(echo "${tag_from_makefile}" | sed -E 's@^(([[:digit:]]+\.)+)x(-)?@\10\3@g' )"
        log "Tag from Makefile with '.x' sanitized: '${tag_from_makefile_sanitized}'"

        local stackrox_repo
        stackrox_repo="$(is_stackrox_repo)"
        log "Is this StackRox repo: ${stackrox_repo}"

        local tags_from_git
        tags_from_git="$(git tag --points-at)"
        local -a tags_from_git_arr
        readarray -t tags_from_git_arr <<< "${tags_from_git}"
        log "Tags seen by git: '${tags_from_git_arr[*]}'"

        local git_describe_output
        git_describe_output="$(git describe --tags --abbrev=10 --dirty --long)"
        log "Long git describe output: '${git_describe_output}'"

        # 2. Decide

        if [[ -n "${tag_from_tekton}" ]]; then
          log "This seems to be a tekton tag push event, using ${tag_from_tekton} for the tag."
          echo "${tag_from_tekton}"
          return
        fi

        # Handle the special case in the Collector repo.
        if printf '%s\0' "${tags_from_git_arr[@]}" | grep -qzFx -- "${tag_from_makefile}"; then
          log "This is not a tag push event but Makefile reports literally the git tag '${tag_from_makefile}'."
          log "This happens when a build was triggered not by a tag push event but the commit is tagged and when the Makefile doesn't use '--long' with 'git describe'."
          log "We should use a different image tag for this build in order to not mix results with a build that was triggered by the tag push event and which will indeed use '${tag_from_makefile}' as the tag for images built there."
          log "Using ${git_describe_output} for the tag."
          echo "${git_describe_output}"
          return
        fi

        # We sanitize StackRox tags for Fast Stream users so that versions are comparable according to SemVer.
        # We must not sanitize tags for Collector and Scanner because these are internal, development tags (e.g.
        # 3.20.x-80-g5afdaf059a and 2.35.x-57-ga9da3070bd) which are not exposed to users (and they must match the
        # contents of COLLECTOR_VERSION and SCANNER_VERSION files); instead we add unified tags (same as on images built
        # from StackRox repo, e.g. 4.7.0-551-g1ca8d0d66e-fast) to user-facing Collector and Scanner images (with
        # retagging and/or release pipelines).
        if [[ "${stackrox_repo}" == "yes" ]]; then
          log "Using sanitized Makefile output ${tag_from_makefile_sanitized} for the tag."
          echo "${tag_from_makefile_sanitized}"
          return
        fi

        log "Using Makefile output ${tag_from_makefile} for the tag."
        echo "${tag_from_makefile}"
        return
      }

      # A poor-man's way to differentiate stackrox/stackrox repo from stackrox/collector, stackrox/scanner and others.
      function is_stackrox_repo() {
        result="no"
        if git remote -v | grep -qE '(\b)stackrox/stackrox(\b)'; then
          result="yes"
        fi
        echo "${result}"
      }

      main
