apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: determine-image-tag
spec:
  description: Determines the tag for the output image using the StackRox conventions.
    For development builds the tag comes from the output of 'make tag' command.
  params:
  - name: TAG_SUFFIX
    description: Suffix to append to generated image tag. This suffix may be ignored under certain conditions.
    type: string
  - name: SOURCE_ARTIFACT
    description: The Trusted Artifact URI pointing to the artifact with the application source code. This should be the
      result of the git-clone task, results from other tasks might fail as dirty.
    type: string
  - name: MAKEFILE_DIRECTORY
    description: Directory in which to run 'make' command.
    type: string
    default: "."
  results:
  - name: IMAGE_TAG
    description: Image Tag determined by the custom logic.
  volumes:
  - name: workdir
    emptyDir: { }
  stepTemplate:
    volumeMounts:
    - mountPath: /var/workdir
      name: workdir
  steps:
  - name: use-trusted-artifact
    image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
    computeResources:
      requests:
        memory: 2Gi
      limits:
        memory: 2Gi
    args:
    - use
    - $(params.SOURCE_ARTIFACT)=/var/workdir/source
  - name: determine-image-tag
    image: registry.access.redhat.com/ubi9:latest@sha256:8f1496d50a66e41433031bf5bdedd4635520e692ccd76ffcb649cf9d30d669af
    workingDir: /var/workdir/source
    env:
    - name: PIPELINE_EVENT_TYPE
      # Ref https://pipelinesascode.com/docs/guide/gitops_commands/#event-type-annotation-and-dynamic-variables
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['pipelinesascode.tekton.dev/event-type']
    - name: SOURCE_BRANCH
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['pipelinesascode.tekton.dev/source-branch']
    - name: TARGET_BRANCH
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['pipelinesascode.tekton.dev/branch']
    - name: REPO_URL
      # E.g. "https://github.com/stackrox/stackrox"
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['pipelinesascode.tekton.dev/repo-url']
    script: |
      #!/usr/bin/env bash

      set -euo pipefail

      function main() {
        dnf -y install git make

        fail_build_if_git_is_dirty

        local image_tag
        image_tag="$(determine_tag)"

        local suffix
        suffix="$(determine_tag_suffix)"

        echo -n "${image_tag}${suffix}" | tee "$(results.IMAGE_TAG.path)"
      }

      function fail_build_if_git_is_dirty() {
        echo "Checking that there are no uncommitted changes in the git repo."
        echo "If this command fails, you should see the list of modified files below."
        echo "You need to find the reason and prevent it because otherwise the 'make tag' output will include '-dirty' which likely isn't what you want."
        echo ""

        if git status --porcelain | grep "." >&2 ; then
          >&2 echo "ERROR: Modified files found."
          exit 2
        else
          echo "git repo looks clean."
        fi
      }

      function determine_tag() {
        # 1. Gather data

        local tag_from_tekton=""
        if [[ "${TARGET_BRANCH}" == refs/tags/* ]]; then
          tag_from_tekton="${TARGET_BRANCH#refs/tags/}"
        fi
        log "Target branch as reported by Tekton: '${TARGET_BRANCH}'"
        log "Tag from Tekton: '${tag_from_tekton}'"

        log "Tekton event: ${PIPELINE_EVENT_TYPE}"

        local tag_from_makefile
        tag_from_makefile="$(make -C "$(params.MAKEFILE_DIRECTORY)" --quiet --no-print-directory tag)"
        log "Tag reported by Makefile: '${tag_from_makefile}'"

        local tags_from_git
        tags_from_git="$(git tag --points-at)"
        local -a tags_from_git_arr
        readarray -t tags_from_git_arr < <(printf '%s' "$tags_from_git")
        log "Tags seen by git: '${tags_from_git_arr[*]}'"

        local git_describe_output
        git_describe_output="$(git describe --tags --abbrev=10 --dirty --long)"
        log "Long git describe output: '${git_describe_output}'"

        # 2. Decide

        if [[ -n "${tag_from_tekton}" ]]; then
          log "This seems to be a tekton tag push event, using '${tag_from_tekton}' for the tag."
          sanitize_tag "${tag_from_tekton}"
          return
        fi

        if [[ "${PIPELINE_EVENT_TYPE}" =~ ^(re)?test-(all-)?comment$ ]]; then
          log "This seems to be a retest of a pipeline run, checking if this is for a tagged build."
          if [[ "${#tags_from_git_arr[*]}" -gt 0 ]]; then
            log "This seems to be a re-run of a tagged build, using the first tag detected: '${tags_from_git_arr[0]}'."
            sanitize_tag "${tags_from_git_arr[0]}"
            return
          else
            log "This is not a tagged build, so continuing with normal logic."
          fi
        fi

        # Handle the special case in the Collector repo.
        if printf '%s\0' "${tags_from_git_arr[@]}" | grep -qzFx -- "${tag_from_makefile}"; then
          log "This is not a tag push event but Makefile reports literally the git tag '${tag_from_makefile}'."
          log "This happens when a build was triggered not by a tag push event but the commit is tagged and when the Makefile doesn't use '--long' with 'git describe'."
          log "We should use a different image tag for this build in order to not mix results with a build that was triggered by the tag push event and which will indeed use '${tag_from_makefile}' as the tag for images built there."
          log "Using '${git_describe_output}' for the tag."
          echo "${git_describe_output}"
          return
        fi

        log "Using Makefile output '${tag_from_makefile}' for the tag."
        sanitize_tag "${tag_from_makefile}"
        return
      }

      # sanitize_tag changes '.x' to '.0' in StackRox repo tags and passes through tags for other repos as-is.
      #
      # Fast Stream tags/versions must be comparable according to SemVer and so versions like '4.7.x-anything' should
      # be converted to '4.7.0-anything'.
      # We must not sanitize tags for Collector and Scanner because these are internal, development tags (e.g.
      # 3.20.x-80-g5afdaf059a and 2.35.x-57-ga9da3070bd) which are not exposed to users (and they must match the
      # contents of COLLECTOR_VERSION and SCANNER_VERSION files); instead we add unified tags (same as on images built
      # from StackRox repo, e.g. 4.7.0-551-g1ca8d0d66e-fast) to user-facing Collector and Scanner images (with
      # retagging and/or release pipelines).
      function sanitize_tag() {
        local -r tag="$1"

        local tag_sanitized
        tag_sanitized="$(echo "${tag}" | sed -E 's@^(([[:digit:]]+\.)+)x(-)?@\10\3@g' )"

        if [[ "$(is_stackrox_repo)" == "yes" && "${tag}" != "${tag_sanitized}" ]]; then
          log "This is StackRox repo, using '.x'->'.0' sanitized tag '${tag_sanitized}'."
          echo "${tag_sanitized}"
          return
        fi

        echo "${tag}"
        return
      }

      # determine_tag_suffix omits the image tag suffix for Stable Stream release (and release-like) builds.
      function determine_tag_suffix() {
        local -r suffix_param="$(params.TAG_SUFFIX)"

        if [[ "$(is_stackrox_repo)" == "no" ]]; then
          log "This is not a StackRox repo, using '${suffix_param}' as the tag suffix."
          echo "${suffix_param}"
          return
        fi

        log "Konflux TARGET_BRANCH: ${TARGET_BRANCH}"
        log "Konflux SOURCE_BRANCH: ${SOURCE_BRANCH}"

        if [[ "${SOURCE_BRANCH}" == *konflux-release-like* ]]; then
          log "This looks like a PR branch containing the magic string. The tag suffix is suppressed."
          echo ""
          return
        else
          log "Did not spot the magic string in the SOURCE_BRANCH."
        fi

        if grep -qE '^((refs/heads/)?release-[0-9a-z]+\.[0-9a-z]+|refs/tags/[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?)$' <<< "${TARGET_BRANCH}"; then
          log "This looks like a release branch or release tag push, or PR targeting the release branch. The tag suffix is suppressed."
          echo ""
          return
        fi

        log "This does not look like a release branch or release tag push, nor like PR targeting the release branch. Using '${suffix_param}' as the tag suffix."
        echo "${suffix_param}"
        return
      }

      # Differentiate stackrox/stackrox repo from stackrox/collector, stackrox/scanner and others.
      function is_stackrox_repo() {
        if [[ "${REPO_URL}" == "https://github.com/stackrox/stackrox" ]]; then
          echo "yes"
        else
          echo "no"
        fi
      }

      # Log to stderr so not to mess up the stdout result for any function which would use this function.
      function log() {
        >&2 echo ">>>" "$@"
      }

      main
